#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("A_0_0", 32, hls_in, 0, "ap_none", "in_data", 1),
	Port_Property("A_0_1", 32, hls_in, 1, "ap_none", "in_data", 1),
	Port_Property("A_0_2", 32, hls_in, 2, "ap_none", "in_data", 1),
	Port_Property("A_1_0", 32, hls_in, 3, "ap_none", "in_data", 1),
	Port_Property("A_1_1", 32, hls_in, 4, "ap_none", "in_data", 1),
	Port_Property("A_1_2", 32, hls_in, 5, "ap_none", "in_data", 1),
	Port_Property("A_2_0", 32, hls_in, 6, "ap_none", "in_data", 1),
	Port_Property("A_2_1", 32, hls_in, 7, "ap_none", "in_data", 1),
	Port_Property("A_2_2", 32, hls_in, 8, "ap_none", "in_data", 1),
	Port_Property("A_3_0", 32, hls_in, 9, "ap_none", "in_data", 1),
	Port_Property("A_3_1", 32, hls_in, 10, "ap_none", "in_data", 1),
	Port_Property("A_3_2", 32, hls_in, 11, "ap_none", "in_data", 1),
	Port_Property("B_0_0", 32, hls_in, 12, "ap_none", "in_data", 1),
	Port_Property("B_0_1", 32, hls_in, 13, "ap_none", "in_data", 1),
	Port_Property("B_0_2", 32, hls_in, 14, "ap_none", "in_data", 1),
	Port_Property("B_0_3", 32, hls_in, 15, "ap_none", "in_data", 1),
	Port_Property("B_1_0", 32, hls_in, 16, "ap_none", "in_data", 1),
	Port_Property("B_1_1", 32, hls_in, 17, "ap_none", "in_data", 1),
	Port_Property("B_1_2", 32, hls_in, 18, "ap_none", "in_data", 1),
	Port_Property("B_1_3", 32, hls_in, 19, "ap_none", "in_data", 1),
	Port_Property("B_2_0", 32, hls_in, 20, "ap_none", "in_data", 1),
	Port_Property("B_2_1", 32, hls_in, 21, "ap_none", "in_data", 1),
	Port_Property("B_2_2", 32, hls_in, 22, "ap_none", "in_data", 1),
	Port_Property("B_2_3", 32, hls_in, 23, "ap_none", "in_data", 1),
	Port_Property("C_Addr_A", 32, hls_out, 24, "bram", "MemPortADDR2", 1),
	Port_Property("C_EN_A", 1, hls_out, 24, "bram", "MemPortCE2", 1),
	Port_Property("C_WEN_A", 4, hls_out, 24, "bram", "MemPortWE2", 1),
	Port_Property("C_Din_A", 32, hls_out, 24, "bram", "MemPortDIN2", 1),
	Port_Property("C_Dout_A", 32, hls_in, 24, "bram", "MemPortDOUT2", 1),
	Port_Property("C_Clk_A", 1, hls_out, 24, "bram", "mem_clk", 1),
	Port_Property("C_Rst_A", 1, hls_out, 24, "bram", "mem_rst", 1),
	Port_Property("s_axi_AXILiteS_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "matrix_mult";
