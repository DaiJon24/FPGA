// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.307250,HLS_SYN_LAT=89,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=99,HLS_SYN_LUT=379,HLS_VERSION=2020_1}" *)

module matrix_mult (
        ap_clk,
        ap_rst_n,
        A_0_0,
        A_0_1,
        A_0_2,
        A_1_0,
        A_1_1,
        A_1_2,
        A_2_0,
        A_2_1,
        A_2_2,
        A_3_0,
        A_3_1,
        A_3_2,
        B_0_0,
        B_0_1,
        B_0_2,
        B_0_3,
        B_1_0,
        B_1_1,
        B_1_2,
        B_1_3,
        B_2_0,
        B_2_1,
        B_2_2,
        B_2_3,
        C_Addr_A,
        C_EN_A,
        C_WEN_A,
        C_Din_A,
        C_Dout_A,
        C_Clk_A,
        C_Rst_A,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] A_0_0;
input  [31:0] A_0_1;
input  [31:0] A_0_2;
input  [31:0] A_1_0;
input  [31:0] A_1_1;
input  [31:0] A_1_2;
input  [31:0] A_2_0;
input  [31:0] A_2_1;
input  [31:0] A_2_2;
input  [31:0] A_3_0;
input  [31:0] A_3_1;
input  [31:0] A_3_2;
input  [31:0] B_0_0;
input  [31:0] B_0_1;
input  [31:0] B_0_2;
input  [31:0] B_0_3;
input  [31:0] B_1_0;
input  [31:0] B_1_1;
input  [31:0] B_1_2;
input  [31:0] B_1_3;
input  [31:0] B_2_0;
input  [31:0] B_2_1;
input  [31:0] B_2_2;
input  [31:0] B_2_3;
output  [31:0] C_Addr_A;
output   C_EN_A;
output  [3:0] C_WEN_A;
output  [31:0] C_Din_A;
input  [31:0] C_Dout_A;
output   C_Clk_A;
output   C_Rst_A;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg C_EN_A;
reg[3:0] C_WEN_A;
reg C_Rst_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [2:0] i_fu_213_p2;
reg   [2:0] i_reg_328;
wire    ap_CS_fsm_state2;
wire   [5:0] zext_ln19_1_fu_227_p1;
reg   [5:0] zext_ln19_1_reg_333;
wire   [0:0] icmp_ln15_fu_207_p2;
wire   [3:0] sub_ln19_fu_247_p2;
reg   [3:0] sub_ln19_reg_338;
wire   [2:0] j_fu_259_p2;
reg   [2:0] j_reg_346;
wire    ap_CS_fsm_state3;
reg   [3:0] C_addr_reg_351;
wire   [0:0] icmp_ln16_fu_253_p2;
wire   [1:0] trunc_ln19_1_fu_279_p1;
reg   [1:0] trunc_ln19_1_reg_356;
wire   [1:0] k_fu_289_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] sum_fu_319_p2;
wire   [0:0] icmp_ln18_fu_283_p2;
wire    tmp_aesl_mux_load_12i32P_fu_149_ap_ready;
wire   [3:0] tmp_aesl_mux_load_12i32P_fu_149_empty;
wire   [31:0] tmp_aesl_mux_load_12i32P_fu_149_ap_return;
wire    tmp_1_aesl_mux_load_12i32P_fu_178_ap_ready;
wire   [3:0] tmp_1_aesl_mux_load_12i32P_fu_178_empty;
wire   [31:0] tmp_1_aesl_mux_load_12i32P_fu_178_ap_return;
reg   [2:0] i_0_reg_104;
reg   [2:0] j_0_reg_115;
reg   [31:0] sum_0_reg_126;
reg   [1:0] k_0_reg_138;
wire   [63:0] zext_ln21_1_fu_274_p1;
wire   [31:0] C_Addr_A_orig;
wire   [4:0] tmp_2_fu_219_p3;
wire   [1:0] trunc_ln19_fu_231_p1;
wire   [3:0] shl_ln_fu_239_p3;
wire   [3:0] zext_ln19_fu_235_p1;
wire   [5:0] zext_ln21_fu_265_p1;
wire   [5:0] add_ln21_fu_269_p2;
wire   [3:0] zext_ln19_2_fu_295_p1;
wire  signed [31:0] mul_ln19_fu_313_p0;
wire  signed [31:0] mul_ln19_fu_313_p1;
wire   [31:0] mul_ln19_fu_313_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

matrix_mult_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
matrix_mult_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

aesl_mux_load_12i32P tmp_aesl_mux_load_12i32P_fu_149(
    .ap_ready(tmp_aesl_mux_load_12i32P_fu_149_ap_ready),
    .empty_2(A_0_0),
    .empty_3(A_0_1),
    .empty_4(A_0_2),
    .empty_5(A_1_0),
    .empty_6(A_1_1),
    .empty_7(A_1_2),
    .empty_8(A_2_0),
    .empty_9(A_2_1),
    .empty_10(A_2_2),
    .empty_11(A_3_0),
    .empty_12(A_3_1),
    .empty_13(A_3_2),
    .empty(tmp_aesl_mux_load_12i32P_fu_149_empty),
    .ap_return(tmp_aesl_mux_load_12i32P_fu_149_ap_return)
);

aesl_mux_load_12i32P tmp_1_aesl_mux_load_12i32P_fu_178(
    .ap_ready(tmp_1_aesl_mux_load_12i32P_fu_178_ap_ready),
    .empty_2(B_0_0),
    .empty_3(B_0_1),
    .empty_4(B_0_2),
    .empty_5(B_0_3),
    .empty_6(B_1_0),
    .empty_7(B_1_1),
    .empty_8(B_1_2),
    .empty_9(B_1_3),
    .empty_10(B_2_0),
    .empty_11(B_2_1),
    .empty_12(B_2_2),
    .empty_13(B_2_3),
    .empty(tmp_1_aesl_mux_load_12i32P_fu_178_empty),
    .ap_return(tmp_1_aesl_mux_load_12i32P_fu_178_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_253_p2 == 1'd1))) begin
        i_0_reg_104 <= i_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_104 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_207_p2 == 1'd0))) begin
        j_0_reg_115 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_283_p2 == 1'd1))) begin
        j_0_reg_115 <= j_reg_346;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_253_p2 == 1'd0))) begin
        k_0_reg_138 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_283_p2 == 1'd0))) begin
        k_0_reg_138 <= k_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_253_p2 == 1'd0))) begin
        sum_0_reg_126 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_283_p2 == 1'd0))) begin
        sum_0_reg_126 <= sum_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_253_p2 == 1'd0))) begin
        C_addr_reg_351 <= zext_ln21_1_fu_274_p1;
        trunc_ln19_1_reg_356 <= trunc_ln19_1_fu_279_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_328 <= i_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_346 <= j_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_207_p2 == 1'd0))) begin
        sub_ln19_reg_338 <= sub_ln19_fu_247_p2;
        zext_ln19_1_reg_333[4 : 2] <= zext_ln19_1_fu_227_p1[4 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_EN_A = 1'b1;
    end else begin
        C_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_283_p2 == 1'd1))) begin
        C_WEN_A = 4'd15;
    end else begin
        C_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_207_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_207_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln15_fu_207_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln16_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln18_fu_283_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_Addr_A = C_Addr_A_orig << 32'd2;

assign C_Addr_A_orig = C_addr_reg_351;

assign C_Clk_A = ap_clk;

assign C_Din_A = sum_0_reg_126;

always @ (*) begin
    C_Rst_A = ~ap_rst_n;
end

assign add_ln21_fu_269_p2 = (zext_ln19_1_reg_333 + zext_ln21_fu_265_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_213_p2 = (i_0_reg_104 + 3'd1);

assign icmp_ln15_fu_207_p2 = ((i_0_reg_104 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_253_p2 = ((j_0_reg_115 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_283_p2 = ((k_0_reg_138 == 2'd3) ? 1'b1 : 1'b0);

assign j_fu_259_p2 = (j_0_reg_115 + 3'd1);

assign k_fu_289_p2 = (k_0_reg_138 + 2'd1);

assign mul_ln19_fu_313_p0 = tmp_aesl_mux_load_12i32P_fu_149_ap_return;

assign mul_ln19_fu_313_p1 = tmp_1_aesl_mux_load_12i32P_fu_178_ap_return;

assign mul_ln19_fu_313_p2 = ($signed(mul_ln19_fu_313_p0) * $signed(mul_ln19_fu_313_p1));

assign shl_ln_fu_239_p3 = {{trunc_ln19_fu_231_p1}, {2'd0}};

assign sub_ln19_fu_247_p2 = (shl_ln_fu_239_p3 - zext_ln19_fu_235_p1);

assign sum_fu_319_p2 = (mul_ln19_fu_313_p2 + sum_0_reg_126);

assign tmp_1_aesl_mux_load_12i32P_fu_178_empty = {{k_0_reg_138}, {trunc_ln19_1_reg_356}};

assign tmp_2_fu_219_p3 = {{i_0_reg_104}, {2'd0}};

assign tmp_aesl_mux_load_12i32P_fu_149_empty = (sub_ln19_reg_338 + zext_ln19_2_fu_295_p1);

assign trunc_ln19_1_fu_279_p1 = j_0_reg_115[1:0];

assign trunc_ln19_fu_231_p1 = i_0_reg_104[1:0];

assign zext_ln19_1_fu_227_p1 = tmp_2_fu_219_p3;

assign zext_ln19_2_fu_295_p1 = k_0_reg_138;

assign zext_ln19_fu_235_p1 = trunc_ln19_fu_231_p1;

assign zext_ln21_1_fu_274_p1 = add_ln21_fu_269_p2;

assign zext_ln21_fu_265_p1 = j_0_reg_115;

always @ (posedge ap_clk) begin
    zext_ln19_1_reg_333[1:0] <= 2'b00;
    zext_ln19_1_reg_333[5] <= 1'b0;
end

endmodule //matrix_mult
