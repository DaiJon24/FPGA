-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aesl_mux_load_12i32P is
port (
    ap_ready : OUT STD_LOGIC;
    empty_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aesl_mux_load_12i32P is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_read_fu_60_p2 : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_phi_mux_UnifiedRetVal_phi_fu_141_p24_assign_proc : process(empty_2, empty_3, empty_4, empty_5, empty_6, empty_7, empty_8, empty_9, empty_10, empty_11, empty_12, empty_13, tmp_read_fu_60_p2)
    begin
        if (((tmp_read_fu_60_p2 = ap_const_lv4_B) or ((tmp_read_fu_60_p2 = ap_const_lv4_C) or ((tmp_read_fu_60_p2 = ap_const_lv4_D) or ((tmp_read_fu_60_p2 = ap_const_lv4_E) or (tmp_read_fu_60_p2 = ap_const_lv4_F)))))) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_13;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_A)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_12;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_9)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_11;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_8)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_10;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_7)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_9;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_6)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_8;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_5)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_7;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_4)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_6;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_3)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_5;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_2)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_4;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_1)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_3;
        elsif ((tmp_read_fu_60_p2 = ap_const_lv4_0)) then 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= empty_2;
        else 
            ap_phi_mux_UnifiedRetVal_phi_fu_141_p24 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    ap_ready <= ap_const_logic_1;
    ap_return <= ap_phi_mux_UnifiedRetVal_phi_fu_141_p24;
    tmp_read_fu_60_p2 <= empty;
end behav;
