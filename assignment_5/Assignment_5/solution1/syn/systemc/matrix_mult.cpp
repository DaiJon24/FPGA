// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrix_mult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrix_mult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrix_mult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> matrix_mult::ap_ST_fsm_state1 = "1";
const sc_lv<4> matrix_mult::ap_ST_fsm_state2 = "10";
const sc_lv<4> matrix_mult::ap_ST_fsm_state3 = "100";
const sc_lv<4> matrix_mult::ap_ST_fsm_state4 = "1000";
const sc_lv<32> matrix_mult::ap_const_lv32_0 = "00000000000000000000000000000000";
const int matrix_mult::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> matrix_mult::ap_const_lv32_1 = "1";
const sc_lv<1> matrix_mult::ap_const_lv1_0 = "0";
const sc_lv<32> matrix_mult::ap_const_lv32_2 = "10";
const sc_lv<32> matrix_mult::ap_const_lv32_3 = "11";
const sc_lv<3> matrix_mult::ap_const_lv3_0 = "000";
const sc_lv<1> matrix_mult::ap_const_lv1_1 = "1";
const sc_lv<2> matrix_mult::ap_const_lv2_0 = "00";
const sc_lv<4> matrix_mult::ap_const_lv4_0 = "0000";
const sc_lv<4> matrix_mult::ap_const_lv4_F = "1111";
const sc_lv<3> matrix_mult::ap_const_lv3_4 = "100";
const sc_lv<3> matrix_mult::ap_const_lv3_1 = "1";
const sc_lv<2> matrix_mult::ap_const_lv2_3 = "11";
const sc_lv<2> matrix_mult::ap_const_lv2_1 = "1";
const bool matrix_mult::ap_const_boolean_1 = true;

matrix_mult::matrix_mult(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matrix_mult_AXILiteS_s_axi_U = new matrix_mult_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("matrix_mult_AXILiteS_s_axi_U");
    matrix_mult_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    matrix_mult_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    matrix_mult_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    matrix_mult_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    matrix_mult_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    matrix_mult_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    matrix_mult_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    matrix_mult_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    matrix_mult_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    matrix_mult_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    matrix_mult_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    matrix_mult_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    matrix_mult_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    matrix_mult_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    matrix_mult_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    matrix_mult_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    matrix_mult_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    matrix_mult_AXILiteS_s_axi_U->ACLK(ap_clk);
    matrix_mult_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    matrix_mult_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    matrix_mult_AXILiteS_s_axi_U->ap_start(ap_start);
    matrix_mult_AXILiteS_s_axi_U->interrupt(interrupt);
    matrix_mult_AXILiteS_s_axi_U->ap_ready(ap_ready);
    matrix_mult_AXILiteS_s_axi_U->ap_done(ap_done);
    matrix_mult_AXILiteS_s_axi_U->ap_idle(ap_idle);
    tmp_aesl_mux_load_12i32P_fu_149 = new aesl_mux_load_12i32P("tmp_aesl_mux_load_12i32P_fu_149");
    tmp_aesl_mux_load_12i32P_fu_149->ap_ready(tmp_aesl_mux_load_12i32P_fu_149_ap_ready);
    tmp_aesl_mux_load_12i32P_fu_149->empty_2(A_0_0);
    tmp_aesl_mux_load_12i32P_fu_149->empty_3(A_0_1);
    tmp_aesl_mux_load_12i32P_fu_149->empty_4(A_0_2);
    tmp_aesl_mux_load_12i32P_fu_149->empty_5(A_1_0);
    tmp_aesl_mux_load_12i32P_fu_149->empty_6(A_1_1);
    tmp_aesl_mux_load_12i32P_fu_149->empty_7(A_1_2);
    tmp_aesl_mux_load_12i32P_fu_149->empty_8(A_2_0);
    tmp_aesl_mux_load_12i32P_fu_149->empty_9(A_2_1);
    tmp_aesl_mux_load_12i32P_fu_149->empty_10(A_2_2);
    tmp_aesl_mux_load_12i32P_fu_149->empty_11(A_3_0);
    tmp_aesl_mux_load_12i32P_fu_149->empty_12(A_3_1);
    tmp_aesl_mux_load_12i32P_fu_149->empty_13(A_3_2);
    tmp_aesl_mux_load_12i32P_fu_149->empty(tmp_aesl_mux_load_12i32P_fu_149_empty);
    tmp_aesl_mux_load_12i32P_fu_149->ap_return(tmp_aesl_mux_load_12i32P_fu_149_ap_return);
    tmp_1_aesl_mux_load_12i32P_fu_178 = new aesl_mux_load_12i32P("tmp_1_aesl_mux_load_12i32P_fu_178");
    tmp_1_aesl_mux_load_12i32P_fu_178->ap_ready(tmp_1_aesl_mux_load_12i32P_fu_178_ap_ready);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_2(B_0_0);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_3(B_0_1);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_4(B_0_2);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_5(B_0_3);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_6(B_1_0);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_7(B_1_1);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_8(B_1_2);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_9(B_1_3);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_10(B_2_0);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_11(B_2_1);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_12(B_2_2);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty_13(B_2_3);
    tmp_1_aesl_mux_load_12i32P_fu_178->empty(tmp_1_aesl_mux_load_12i32P_fu_178_empty);
    tmp_1_aesl_mux_load_12i32P_fu_178->ap_return(tmp_1_aesl_mux_load_12i32P_fu_178_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_C_Addr_A);
    sensitive << ( C_Addr_A_orig );

    SC_METHOD(thread_C_Addr_A_orig);
    sensitive << ( C_addr_reg_351 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_C_Din_A);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_0_reg_126 );

    SC_METHOD(thread_C_EN_A);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_C_Rst_A);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_C_WEN_A);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln18_fu_283_p2 );

    SC_METHOD(thread_add_ln21_fu_269_p2);
    sensitive << ( zext_ln19_1_reg_333 );
    sensitive << ( zext_ln21_fu_265_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_207_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_207_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_i_fu_213_p2);
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_icmp_ln15_fu_207_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_icmp_ln16_fu_253_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_115 );

    SC_METHOD(thread_icmp_ln18_fu_283_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( k_0_reg_138 );

    SC_METHOD(thread_j_fu_259_p2);
    sensitive << ( j_0_reg_115 );

    SC_METHOD(thread_k_fu_289_p2);
    sensitive << ( k_0_reg_138 );

    SC_METHOD(thread_mul_ln19_fu_313_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_aesl_mux_load_12i32P_fu_149_ap_return );

    SC_METHOD(thread_mul_ln19_fu_313_p1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_aesl_mux_load_12i32P_fu_178_ap_return );

    SC_METHOD(thread_mul_ln19_fu_313_p2);
    sensitive << ( mul_ln19_fu_313_p0 );
    sensitive << ( mul_ln19_fu_313_p1 );

    SC_METHOD(thread_shl_ln_fu_239_p3);
    sensitive << ( trunc_ln19_fu_231_p1 );

    SC_METHOD(thread_sub_ln19_fu_247_p2);
    sensitive << ( shl_ln_fu_239_p3 );
    sensitive << ( zext_ln19_fu_235_p1 );

    SC_METHOD(thread_sum_fu_319_p2);
    sensitive << ( sum_0_reg_126 );
    sensitive << ( mul_ln19_fu_313_p2 );

    SC_METHOD(thread_tmp_1_aesl_mux_load_12i32P_fu_178_empty);
    sensitive << ( trunc_ln19_1_reg_356 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln18_fu_283_p2 );
    sensitive << ( k_0_reg_138 );

    SC_METHOD(thread_tmp_2_fu_219_p3);
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_tmp_aesl_mux_load_12i32P_fu_149_empty);
    sensitive << ( sub_ln19_reg_338 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln18_fu_283_p2 );
    sensitive << ( zext_ln19_2_fu_295_p1 );

    SC_METHOD(thread_trunc_ln19_1_fu_279_p1);
    sensitive << ( j_0_reg_115 );

    SC_METHOD(thread_trunc_ln19_fu_231_p1);
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_zext_ln19_1_fu_227_p1);
    sensitive << ( tmp_2_fu_219_p3 );

    SC_METHOD(thread_zext_ln19_2_fu_295_p1);
    sensitive << ( k_0_reg_138 );

    SC_METHOD(thread_zext_ln19_fu_235_p1);
    sensitive << ( trunc_ln19_fu_231_p1 );

    SC_METHOD(thread_zext_ln21_1_fu_274_p1);
    sensitive << ( add_ln21_fu_269_p2 );

    SC_METHOD(thread_zext_ln21_fu_265_p1);
    sensitive << ( j_0_reg_115 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln15_fu_207_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln16_fu_253_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln18_fu_283_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrix_mult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, A_0_0, "(port)A_0_0");
    sc_trace(mVcdFile, A_0_1, "(port)A_0_1");
    sc_trace(mVcdFile, A_0_2, "(port)A_0_2");
    sc_trace(mVcdFile, A_1_0, "(port)A_1_0");
    sc_trace(mVcdFile, A_1_1, "(port)A_1_1");
    sc_trace(mVcdFile, A_1_2, "(port)A_1_2");
    sc_trace(mVcdFile, A_2_0, "(port)A_2_0");
    sc_trace(mVcdFile, A_2_1, "(port)A_2_1");
    sc_trace(mVcdFile, A_2_2, "(port)A_2_2");
    sc_trace(mVcdFile, A_3_0, "(port)A_3_0");
    sc_trace(mVcdFile, A_3_1, "(port)A_3_1");
    sc_trace(mVcdFile, A_3_2, "(port)A_3_2");
    sc_trace(mVcdFile, B_0_0, "(port)B_0_0");
    sc_trace(mVcdFile, B_0_1, "(port)B_0_1");
    sc_trace(mVcdFile, B_0_2, "(port)B_0_2");
    sc_trace(mVcdFile, B_0_3, "(port)B_0_3");
    sc_trace(mVcdFile, B_1_0, "(port)B_1_0");
    sc_trace(mVcdFile, B_1_1, "(port)B_1_1");
    sc_trace(mVcdFile, B_1_2, "(port)B_1_2");
    sc_trace(mVcdFile, B_1_3, "(port)B_1_3");
    sc_trace(mVcdFile, B_2_0, "(port)B_2_0");
    sc_trace(mVcdFile, B_2_1, "(port)B_2_1");
    sc_trace(mVcdFile, B_2_2, "(port)B_2_2");
    sc_trace(mVcdFile, B_2_3, "(port)B_2_3");
    sc_trace(mVcdFile, C_Addr_A, "(port)C_Addr_A");
    sc_trace(mVcdFile, C_EN_A, "(port)C_EN_A");
    sc_trace(mVcdFile, C_WEN_A, "(port)C_WEN_A");
    sc_trace(mVcdFile, C_Din_A, "(port)C_Din_A");
    sc_trace(mVcdFile, C_Dout_A, "(port)C_Dout_A");
    sc_trace(mVcdFile, C_Clk_A, "(port)C_Clk_A");
    sc_trace(mVcdFile, C_Rst_A, "(port)C_Rst_A");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, i_fu_213_p2, "i_fu_213_p2");
    sc_trace(mVcdFile, i_reg_328, "i_reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln19_1_fu_227_p1, "zext_ln19_1_fu_227_p1");
    sc_trace(mVcdFile, zext_ln19_1_reg_333, "zext_ln19_1_reg_333");
    sc_trace(mVcdFile, icmp_ln15_fu_207_p2, "icmp_ln15_fu_207_p2");
    sc_trace(mVcdFile, sub_ln19_fu_247_p2, "sub_ln19_fu_247_p2");
    sc_trace(mVcdFile, sub_ln19_reg_338, "sub_ln19_reg_338");
    sc_trace(mVcdFile, j_fu_259_p2, "j_fu_259_p2");
    sc_trace(mVcdFile, j_reg_346, "j_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, C_addr_reg_351, "C_addr_reg_351");
    sc_trace(mVcdFile, icmp_ln16_fu_253_p2, "icmp_ln16_fu_253_p2");
    sc_trace(mVcdFile, trunc_ln19_1_fu_279_p1, "trunc_ln19_1_fu_279_p1");
    sc_trace(mVcdFile, trunc_ln19_1_reg_356, "trunc_ln19_1_reg_356");
    sc_trace(mVcdFile, k_fu_289_p2, "k_fu_289_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, sum_fu_319_p2, "sum_fu_319_p2");
    sc_trace(mVcdFile, icmp_ln18_fu_283_p2, "icmp_ln18_fu_283_p2");
    sc_trace(mVcdFile, tmp_aesl_mux_load_12i32P_fu_149_ap_ready, "tmp_aesl_mux_load_12i32P_fu_149_ap_ready");
    sc_trace(mVcdFile, tmp_aesl_mux_load_12i32P_fu_149_empty, "tmp_aesl_mux_load_12i32P_fu_149_empty");
    sc_trace(mVcdFile, tmp_aesl_mux_load_12i32P_fu_149_ap_return, "tmp_aesl_mux_load_12i32P_fu_149_ap_return");
    sc_trace(mVcdFile, tmp_1_aesl_mux_load_12i32P_fu_178_ap_ready, "tmp_1_aesl_mux_load_12i32P_fu_178_ap_ready");
    sc_trace(mVcdFile, tmp_1_aesl_mux_load_12i32P_fu_178_empty, "tmp_1_aesl_mux_load_12i32P_fu_178_empty");
    sc_trace(mVcdFile, tmp_1_aesl_mux_load_12i32P_fu_178_ap_return, "tmp_1_aesl_mux_load_12i32P_fu_178_ap_return");
    sc_trace(mVcdFile, i_0_reg_104, "i_0_reg_104");
    sc_trace(mVcdFile, j_0_reg_115, "j_0_reg_115");
    sc_trace(mVcdFile, sum_0_reg_126, "sum_0_reg_126");
    sc_trace(mVcdFile, k_0_reg_138, "k_0_reg_138");
    sc_trace(mVcdFile, zext_ln21_1_fu_274_p1, "zext_ln21_1_fu_274_p1");
    sc_trace(mVcdFile, C_Addr_A_orig, "C_Addr_A_orig");
    sc_trace(mVcdFile, tmp_2_fu_219_p3, "tmp_2_fu_219_p3");
    sc_trace(mVcdFile, trunc_ln19_fu_231_p1, "trunc_ln19_fu_231_p1");
    sc_trace(mVcdFile, shl_ln_fu_239_p3, "shl_ln_fu_239_p3");
    sc_trace(mVcdFile, zext_ln19_fu_235_p1, "zext_ln19_fu_235_p1");
    sc_trace(mVcdFile, zext_ln21_fu_265_p1, "zext_ln21_fu_265_p1");
    sc_trace(mVcdFile, add_ln21_fu_269_p2, "add_ln21_fu_269_p2");
    sc_trace(mVcdFile, zext_ln19_2_fu_295_p1, "zext_ln19_2_fu_295_p1");
    sc_trace(mVcdFile, mul_ln19_fu_313_p0, "mul_ln19_fu_313_p0");
    sc_trace(mVcdFile, mul_ln19_fu_313_p1, "mul_ln19_fu_313_p1");
    sc_trace(mVcdFile, mul_ln19_fu_313_p2, "mul_ln19_fu_313_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("matrix_mult.hdltvin.dat");
    mHdltvoutHandle.open("matrix_mult.hdltvout.dat");
}

matrix_mult::~matrix_mult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete matrix_mult_AXILiteS_s_axi_U;
    delete tmp_aesl_mux_load_12i32P_fu_149;
    delete tmp_1_aesl_mux_load_12i32P_fu_178;
}

void matrix_mult::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void matrix_mult::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_253_p2.read(), ap_const_lv1_1))) {
        i_0_reg_104 = i_reg_328.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_104 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_207_p2.read(), ap_const_lv1_0))) {
        j_0_reg_115 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(icmp_ln18_fu_283_p2.read(), ap_const_lv1_1))) {
        j_0_reg_115 = j_reg_346.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_253_p2.read()))) {
        k_0_reg_138 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln18_fu_283_p2.read()))) {
        k_0_reg_138 = k_fu_289_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_253_p2.read()))) {
        sum_0_reg_126 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln18_fu_283_p2.read()))) {
        sum_0_reg_126 = sum_fu_319_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_253_p2.read()))) {
        C_addr_reg_351 =  (sc_lv<4>) (zext_ln21_1_fu_274_p1.read());
        trunc_ln19_1_reg_356 = trunc_ln19_1_fu_279_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_328 = i_fu_213_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_346 = j_fu_259_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln15_fu_207_p2.read(), ap_const_lv1_0))) {
        sub_ln19_reg_338 = sub_ln19_fu_247_p2.read();
        zext_ln19_1_reg_333 = zext_ln19_1_fu_227_p1.read();
    }
}

void matrix_mult::thread_C_Addr_A() {
    C_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): C_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void matrix_mult::thread_C_Addr_A_orig() {
    C_Addr_A_orig =  (sc_lv<32>) (C_addr_reg_351.read());
}

void matrix_mult::thread_C_Clk_A() {
    C_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void matrix_mult::thread_C_Din_A() {
    C_Din_A = sum_0_reg_126.read();
}

void matrix_mult::thread_C_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        C_EN_A = ap_const_logic_1;
    } else {
        C_EN_A = ap_const_logic_0;
    }
}

void matrix_mult::thread_C_Rst_A() {
    C_Rst_A =  (sc_logic) (~ap_rst_n.read());
}

void matrix_mult::thread_C_WEN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_283_p2.read(), ap_const_lv1_1))) {
        C_WEN_A = ap_const_lv4_F;
    } else {
        C_WEN_A = ap_const_lv4_0;
    }
}

void matrix_mult::thread_add_ln21_fu_269_p2() {
    add_ln21_fu_269_p2 = (!zext_ln19_1_reg_333.read().is_01() || !zext_ln21_fu_265_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln19_1_reg_333.read()) + sc_biguint<6>(zext_ln21_fu_265_p1.read()));
}

void matrix_mult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void matrix_mult::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void matrix_mult::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void matrix_mult::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void matrix_mult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_207_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln15_fu_207_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrix_mult::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void matrix_mult::thread_i_fu_213_p2() {
    i_fu_213_p2 = (!i_0_reg_104.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_reg_104.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void matrix_mult::thread_icmp_ln15_fu_207_p2() {
    icmp_ln15_fu_207_p2 = (!i_0_reg_104.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_104.read() == ap_const_lv3_4);
}

void matrix_mult::thread_icmp_ln16_fu_253_p2() {
    icmp_ln16_fu_253_p2 = (!j_0_reg_115.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_115.read() == ap_const_lv3_4);
}

void matrix_mult::thread_icmp_ln18_fu_283_p2() {
    icmp_ln18_fu_283_p2 = (!k_0_reg_138.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_138.read() == ap_const_lv2_3);
}

void matrix_mult::thread_j_fu_259_p2() {
    j_fu_259_p2 = (!j_0_reg_115.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_115.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void matrix_mult::thread_k_fu_289_p2() {
    k_fu_289_p2 = (!k_0_reg_138.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(k_0_reg_138.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void matrix_mult::thread_mul_ln19_fu_313_p0() {
    mul_ln19_fu_313_p0 = tmp_aesl_mux_load_12i32P_fu_149_ap_return.read();
}

void matrix_mult::thread_mul_ln19_fu_313_p1() {
    mul_ln19_fu_313_p1 = tmp_1_aesl_mux_load_12i32P_fu_178_ap_return.read();
}

void matrix_mult::thread_mul_ln19_fu_313_p2() {
    mul_ln19_fu_313_p2 = (!mul_ln19_fu_313_p0.read().is_01() || !mul_ln19_fu_313_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln19_fu_313_p0.read()) * sc_bigint<32>(mul_ln19_fu_313_p1.read());
}

void matrix_mult::thread_shl_ln_fu_239_p3() {
    shl_ln_fu_239_p3 = esl_concat<2,2>(trunc_ln19_fu_231_p1.read(), ap_const_lv2_0);
}

void matrix_mult::thread_sub_ln19_fu_247_p2() {
    sub_ln19_fu_247_p2 = (!shl_ln_fu_239_p3.read().is_01() || !zext_ln19_fu_235_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(shl_ln_fu_239_p3.read()) - sc_biguint<4>(zext_ln19_fu_235_p1.read()));
}

void matrix_mult::thread_sum_fu_319_p2() {
    sum_fu_319_p2 = (!mul_ln19_fu_313_p2.read().is_01() || !sum_0_reg_126.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln19_fu_313_p2.read()) + sc_biguint<32>(sum_0_reg_126.read()));
}

void matrix_mult::thread_tmp_1_aesl_mux_load_12i32P_fu_178_empty() {
    tmp_1_aesl_mux_load_12i32P_fu_178_empty = esl_concat<2,2>(k_0_reg_138.read(), trunc_ln19_1_reg_356.read());
}

void matrix_mult::thread_tmp_2_fu_219_p3() {
    tmp_2_fu_219_p3 = esl_concat<3,2>(i_0_reg_104.read(), ap_const_lv2_0);
}

void matrix_mult::thread_tmp_aesl_mux_load_12i32P_fu_149_empty() {
    tmp_aesl_mux_load_12i32P_fu_149_empty = (!sub_ln19_reg_338.read().is_01() || !zext_ln19_2_fu_295_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(sub_ln19_reg_338.read()) + sc_biguint<4>(zext_ln19_2_fu_295_p1.read()));
}

void matrix_mult::thread_trunc_ln19_1_fu_279_p1() {
    trunc_ln19_1_fu_279_p1 = j_0_reg_115.read().range(2-1, 0);
}

void matrix_mult::thread_trunc_ln19_fu_231_p1() {
    trunc_ln19_fu_231_p1 = i_0_reg_104.read().range(2-1, 0);
}

void matrix_mult::thread_zext_ln19_1_fu_227_p1() {
    zext_ln19_1_fu_227_p1 = esl_zext<6,5>(tmp_2_fu_219_p3.read());
}

void matrix_mult::thread_zext_ln19_2_fu_295_p1() {
    zext_ln19_2_fu_295_p1 = esl_zext<4,2>(k_0_reg_138.read());
}

void matrix_mult::thread_zext_ln19_fu_235_p1() {
    zext_ln19_fu_235_p1 = esl_zext<4,2>(trunc_ln19_fu_231_p1.read());
}

void matrix_mult::thread_zext_ln21_1_fu_274_p1() {
    zext_ln21_1_fu_274_p1 = esl_zext<64,6>(add_ln21_fu_269_p2.read());
}

void matrix_mult::thread_zext_ln21_fu_265_p1() {
    zext_ln21_fu_265_p1 = esl_zext<6,3>(j_0_reg_115.read());
}

void matrix_mult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln15_fu_207_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_253_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln18_fu_283_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void matrix_mult::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_0_0\" :  \"" << A_0_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_0_1\" :  \"" << A_0_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_0_2\" :  \"" << A_0_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_1_0\" :  \"" << A_1_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_1_1\" :  \"" << A_1_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_1_2\" :  \"" << A_1_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_2_0\" :  \"" << A_2_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_2_1\" :  \"" << A_2_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_2_2\" :  \"" << A_2_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_3_0\" :  \"" << A_3_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_3_1\" :  \"" << A_3_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_3_2\" :  \"" << A_3_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_0_0\" :  \"" << B_0_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_0_1\" :  \"" << B_0_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_0_2\" :  \"" << B_0_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_0_3\" :  \"" << B_0_3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_1_0\" :  \"" << B_1_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_1_1\" :  \"" << B_1_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_1_2\" :  \"" << B_1_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_1_3\" :  \"" << B_1_3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_2_0\" :  \"" << B_2_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_2_1\" :  \"" << B_2_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_2_2\" :  \"" << B_2_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_2_3\" :  \"" << B_2_3.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"C_Addr_A\" :  \"" << C_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_EN_A\" :  \"" << C_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_WEN_A\" :  \"" << C_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Din_A\" :  \"" << C_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"C_Dout_A\" :  \"" << C_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Clk_A\" :  \"" << C_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_Rst_A\" :  \"" << C_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

