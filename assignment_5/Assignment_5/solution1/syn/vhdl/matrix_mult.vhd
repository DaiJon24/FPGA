-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_1_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_2_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_3_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_0_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_1_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_2_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_EN_A : OUT STD_LOGIC;
    C_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    C_Clk_A : OUT STD_LOGIC;
    C_Rst_A : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of matrix_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.307250,HLS_SYN_LAT=89,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=99,HLS_SYN_LUT=379,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal i_fu_213_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln19_1_fu_227_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_1_reg_333 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln15_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln19_fu_247_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln19_reg_338 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_259_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_346 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal C_addr_reg_351 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln19_1_fu_279_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln19_1_reg_356 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_fu_289_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_aesl_mux_load_12i32P_fu_149_ap_ready : STD_LOGIC;
    signal tmp_aesl_mux_load_12i32P_fu_149_empty : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_aesl_mux_load_12i32P_fu_149_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_aesl_mux_load_12i32P_fu_178_ap_ready : STD_LOGIC;
    signal tmp_1_aesl_mux_load_12i32P_fu_178_empty : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_aesl_mux_load_12i32P_fu_178_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_104 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_115 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_0_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_138 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln21_1_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal C_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_219_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln19_fu_231_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_239_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_fu_235_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln21_fu_265_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln21_fu_269_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln19_2_fu_295_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln19_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln19_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component aesl_mux_load_12i32P IS
    port (
        ap_ready : OUT STD_LOGIC;
        empty_2 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_4 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_6 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_7 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_8 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_9 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_10 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_11 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_12 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_13 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (3 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_mult_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    matrix_mult_AXILiteS_s_axi_U : component matrix_mult_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    tmp_aesl_mux_load_12i32P_fu_149 : component aesl_mux_load_12i32P
    port map (
        ap_ready => tmp_aesl_mux_load_12i32P_fu_149_ap_ready,
        empty_2 => A_0_0,
        empty_3 => A_0_1,
        empty_4 => A_0_2,
        empty_5 => A_1_0,
        empty_6 => A_1_1,
        empty_7 => A_1_2,
        empty_8 => A_2_0,
        empty_9 => A_2_1,
        empty_10 => A_2_2,
        empty_11 => A_3_0,
        empty_12 => A_3_1,
        empty_13 => A_3_2,
        empty => tmp_aesl_mux_load_12i32P_fu_149_empty,
        ap_return => tmp_aesl_mux_load_12i32P_fu_149_ap_return);

    tmp_1_aesl_mux_load_12i32P_fu_178 : component aesl_mux_load_12i32P
    port map (
        ap_ready => tmp_1_aesl_mux_load_12i32P_fu_178_ap_ready,
        empty_2 => B_0_0,
        empty_3 => B_0_1,
        empty_4 => B_0_2,
        empty_5 => B_0_3,
        empty_6 => B_1_0,
        empty_7 => B_1_1,
        empty_8 => B_1_2,
        empty_9 => B_1_3,
        empty_10 => B_2_0,
        empty_11 => B_2_1,
        empty_12 => B_2_2,
        empty_13 => B_2_3,
        empty => tmp_1_aesl_mux_load_12i32P_fu_178_empty,
        ap_return => tmp_1_aesl_mux_load_12i32P_fu_178_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_253_p2 = ap_const_lv1_1))) then 
                i_0_reg_104 <= i_reg_328;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_104 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_207_p2 = ap_const_lv1_0))) then 
                j_0_reg_115 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_283_p2 = ap_const_lv1_1))) then 
                j_0_reg_115 <= j_reg_346;
            end if; 
        end if;
    end process;

    k_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_253_p2 = ap_const_lv1_0))) then 
                k_0_reg_138 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_283_p2 = ap_const_lv1_0))) then 
                k_0_reg_138 <= k_fu_289_p2;
            end if; 
        end if;
    end process;

    sum_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_253_p2 = ap_const_lv1_0))) then 
                sum_0_reg_126 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_283_p2 = ap_const_lv1_0))) then 
                sum_0_reg_126 <= sum_fu_319_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_253_p2 = ap_const_lv1_0))) then
                C_addr_reg_351 <= zext_ln21_1_fu_274_p1(4 - 1 downto 0);
                trunc_ln19_1_reg_356 <= trunc_ln19_1_fu_279_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_328 <= i_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_346 <= j_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_207_p2 = ap_const_lv1_0))) then
                sub_ln19_reg_338 <= sub_ln19_fu_247_p2;
                    zext_ln19_1_reg_333(4 downto 2) <= zext_ln19_1_fu_227_p1(4 downto 2);
            end if;
        end if;
    end process;
    zext_ln19_1_reg_333(1 downto 0) <= "00";
    zext_ln19_1_reg_333(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln15_fu_207_p2, ap_CS_fsm_state3, icmp_ln16_fu_253_p2, ap_CS_fsm_state4, icmp_ln18_fu_283_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_207_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln16_fu_253_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_283_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    C_Addr_A <= std_logic_vector(shift_left(unsigned(C_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    C_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(C_addr_reg_351),32));
    C_Clk_A <= ap_clk;
    C_Din_A <= sum_0_reg_126;

    C_EN_A_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_EN_A <= ap_const_logic_1;
        else 
            C_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    C_Rst_A_assign_proc : process(ap_rst_n)
    begin
                C_Rst_A <= not(ap_rst_n);
    end process;


    C_WEN_A_assign_proc : process(ap_CS_fsm_state4, icmp_ln18_fu_283_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln18_fu_283_p2 = ap_const_lv1_1))) then 
            C_WEN_A <= ap_const_lv4_F;
        else 
            C_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    add_ln21_fu_269_p2 <= std_logic_vector(unsigned(zext_ln19_1_reg_333) + unsigned(zext_ln21_fu_265_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln15_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_207_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln15_fu_207_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln15_fu_207_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_213_p2 <= std_logic_vector(unsigned(i_0_reg_104) + unsigned(ap_const_lv3_1));
    icmp_ln15_fu_207_p2 <= "1" when (i_0_reg_104 = ap_const_lv3_4) else "0";
    icmp_ln16_fu_253_p2 <= "1" when (j_0_reg_115 = ap_const_lv3_4) else "0";
    icmp_ln18_fu_283_p2 <= "1" when (k_0_reg_138 = ap_const_lv2_3) else "0";
    j_fu_259_p2 <= std_logic_vector(unsigned(j_0_reg_115) + unsigned(ap_const_lv3_1));
    k_fu_289_p2 <= std_logic_vector(unsigned(k_0_reg_138) + unsigned(ap_const_lv2_1));
    mul_ln19_fu_313_p0 <= tmp_aesl_mux_load_12i32P_fu_149_ap_return;
    mul_ln19_fu_313_p1 <= tmp_1_aesl_mux_load_12i32P_fu_178_ap_return;
    mul_ln19_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln19_fu_313_p0) * signed(mul_ln19_fu_313_p1))), 32));
    shl_ln_fu_239_p3 <= (trunc_ln19_fu_231_p1 & ap_const_lv2_0);
    sub_ln19_fu_247_p2 <= std_logic_vector(unsigned(shl_ln_fu_239_p3) - unsigned(zext_ln19_fu_235_p1));
    sum_fu_319_p2 <= std_logic_vector(unsigned(mul_ln19_fu_313_p2) + unsigned(sum_0_reg_126));
    tmp_1_aesl_mux_load_12i32P_fu_178_empty <= (k_0_reg_138 & trunc_ln19_1_reg_356);
    tmp_2_fu_219_p3 <= (i_0_reg_104 & ap_const_lv2_0);
    tmp_aesl_mux_load_12i32P_fu_149_empty <= std_logic_vector(unsigned(sub_ln19_reg_338) + unsigned(zext_ln19_2_fu_295_p1));
    trunc_ln19_1_fu_279_p1 <= j_0_reg_115(2 - 1 downto 0);
    trunc_ln19_fu_231_p1 <= i_0_reg_104(2 - 1 downto 0);
    zext_ln19_1_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_219_p3),6));
    zext_ln19_2_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_138),4));
    zext_ln19_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln19_fu_231_p1),4));
    zext_ln21_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_269_p2),64));
    zext_ln21_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_115),6));
end behav;
