// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "assignment_4_cpp.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic assignment_4_cpp::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic assignment_4_cpp::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state1 = "1";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state2 = "10";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state3 = "100";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state4 = "1000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state5 = "10000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state6 = "100000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state7 = "1000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state8 = "10000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state9 = "100000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state10 = "1000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state11 = "10000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state12 = "100000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<70> assignment_4_cpp::ap_ST_fsm_state70 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> assignment_4_cpp::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> assignment_4_cpp::ap_const_lv32_1 = "1";
const sc_lv<1> assignment_4_cpp::ap_const_lv1_0 = "0";
const sc_lv<32> assignment_4_cpp::ap_const_lv32_2 = "10";
const sc_lv<4> assignment_4_cpp::ap_const_lv4_0 = "0000";
const sc_lv<32> assignment_4_cpp::ap_const_lv32_45 = "1000101";
const sc_lv<4> assignment_4_cpp::ap_const_lv4_C = "1100";
const sc_lv<4> assignment_4_cpp::ap_const_lv4_1 = "1";
const sc_lv<1> assignment_4_cpp::ap_const_lv1_1 = "1";
const bool assignment_4_cpp::ap_const_boolean_1 = true;

assignment_4_cpp::assignment_4_cpp(sc_module_name name) : sc_module(name), mVcdFile(0) {
    assignment_4_cpp_bkb_U1 = new assignment_4_cpp_bkb<1,68,64,64,64>("assignment_4_cpp_bkb_U1");
    assignment_4_cpp_bkb_U1->clk(ap_clk);
    assignment_4_cpp_bkb_U1->reset(ap_rst);
    assignment_4_cpp_bkb_U1->start(grp_fu_173_ap_start);
    assignment_4_cpp_bkb_U1->done(grp_fu_173_ap_done);
    assignment_4_cpp_bkb_U1->din0(array_a_cpp_q0);
    assignment_4_cpp_bkb_U1->din1(array_b_cpp_q0);
    assignment_4_cpp_bkb_U1->ce(ap_var_for_const0);
    assignment_4_cpp_bkb_U1->dout(grp_fu_173_p2);
    assignment_4_cpp_cud_U2 = new assignment_4_cpp_cud<1,68,64,64,64>("assignment_4_cpp_cud_U2");
    assignment_4_cpp_cud_U2->clk(ap_clk);
    assignment_4_cpp_cud_U2->reset(ap_rst);
    assignment_4_cpp_cud_U2->start(grp_fu_180_ap_start);
    assignment_4_cpp_cud_U2->done(grp_fu_180_ap_done);
    assignment_4_cpp_cud_U2->din0(array_a_cpp_q0);
    assignment_4_cpp_cud_U2->din1(array_b_cpp_q0);
    assignment_4_cpp_cud_U2->ce(ap_var_for_const0);
    assignment_4_cpp_cud_U2->dout(grp_fu_180_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add1_address0);
    sensitive << ( zext_ln11_reg_195 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_add1_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_add1_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( add_ln11_fu_152_p0 );
    sensitive << ( add_ln11_fu_152_p1 );

    SC_METHOD(thread_add1_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_add_ln11_fu_152_p0);
    sensitive << ( array_a_cpp_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_add_ln11_fu_152_p1);
    sensitive << ( array_b_cpp_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state70);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_134_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_134_p2 );

    SC_METHOD(thread_array_a_cpp_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln11_fu_146_p1 );

    SC_METHOD(thread_array_a_cpp_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_array_b_cpp_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln11_fu_146_p1 );

    SC_METHOD(thread_array_b_cpp_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_div1_address0);
    sensitive << ( zext_ln11_reg_195 );
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_div1_ce0);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_div1_d0);
    sensitive << ( ap_CS_fsm_state70 );
    sensitive << ( grp_fu_173_p2 );

    SC_METHOD(thread_div1_we0);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_grp_fu_173_ap_start);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_180_ap_start);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i_fu_140_p2);
    sensitive << ( i_0_reg_123 );

    SC_METHOD(thread_icmp_ln9_fu_134_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_123 );

    SC_METHOD(thread_mod1_address0);
    sensitive << ( zext_ln11_reg_195 );
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_mod1_ce0);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_mod1_d0);
    sensitive << ( ap_CS_fsm_state70 );
    sensitive << ( grp_fu_180_p2 );

    SC_METHOD(thread_mod1_we0);
    sensitive << ( ap_CS_fsm_state70 );

    SC_METHOD(thread_mul1_address0);
    sensitive << ( zext_ln11_reg_195 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul1_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul1_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( mul_ln13_fu_166_p0 );
    sensitive << ( mul_ln13_fu_166_p1 );

    SC_METHOD(thread_mul1_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln13_fu_166_p0);
    sensitive << ( array_a_cpp_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln13_fu_166_p1);
    sensitive << ( array_b_cpp_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sub1_address0);
    sensitive << ( zext_ln11_reg_195 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sub1_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sub1_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sub_ln12_fu_159_p0 );
    sensitive << ( sub_ln12_fu_159_p1 );

    SC_METHOD(thread_sub1_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sub_ln12_fu_159_p0);
    sensitive << ( array_a_cpp_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_sub_ln12_fu_159_p1);
    sensitive << ( array_b_cpp_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_zext_ln11_fu_146_p1);
    sensitive << ( i_0_reg_123 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_134_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "assignment_4_cpp_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, array_a_cpp_address0, "(port)array_a_cpp_address0");
    sc_trace(mVcdFile, array_a_cpp_ce0, "(port)array_a_cpp_ce0");
    sc_trace(mVcdFile, array_a_cpp_q0, "(port)array_a_cpp_q0");
    sc_trace(mVcdFile, array_b_cpp_address0, "(port)array_b_cpp_address0");
    sc_trace(mVcdFile, array_b_cpp_ce0, "(port)array_b_cpp_ce0");
    sc_trace(mVcdFile, array_b_cpp_q0, "(port)array_b_cpp_q0");
    sc_trace(mVcdFile, add1_address0, "(port)add1_address0");
    sc_trace(mVcdFile, add1_ce0, "(port)add1_ce0");
    sc_trace(mVcdFile, add1_we0, "(port)add1_we0");
    sc_trace(mVcdFile, add1_d0, "(port)add1_d0");
    sc_trace(mVcdFile, sub1_address0, "(port)sub1_address0");
    sc_trace(mVcdFile, sub1_ce0, "(port)sub1_ce0");
    sc_trace(mVcdFile, sub1_we0, "(port)sub1_we0");
    sc_trace(mVcdFile, sub1_d0, "(port)sub1_d0");
    sc_trace(mVcdFile, mul1_address0, "(port)mul1_address0");
    sc_trace(mVcdFile, mul1_ce0, "(port)mul1_ce0");
    sc_trace(mVcdFile, mul1_we0, "(port)mul1_we0");
    sc_trace(mVcdFile, mul1_d0, "(port)mul1_d0");
    sc_trace(mVcdFile, div1_address0, "(port)div1_address0");
    sc_trace(mVcdFile, div1_ce0, "(port)div1_ce0");
    sc_trace(mVcdFile, div1_we0, "(port)div1_we0");
    sc_trace(mVcdFile, div1_d0, "(port)div1_d0");
    sc_trace(mVcdFile, mod1_address0, "(port)mod1_address0");
    sc_trace(mVcdFile, mod1_ce0, "(port)mod1_ce0");
    sc_trace(mVcdFile, mod1_we0, "(port)mod1_we0");
    sc_trace(mVcdFile, mod1_d0, "(port)mod1_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_140_p2, "i_fu_140_p2");
    sc_trace(mVcdFile, i_reg_190, "i_reg_190");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln11_fu_146_p1, "zext_ln11_fu_146_p1");
    sc_trace(mVcdFile, zext_ln11_reg_195, "zext_ln11_reg_195");
    sc_trace(mVcdFile, icmp_ln9_fu_134_p2, "icmp_ln9_fu_134_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_reg_123, "i_0_reg_123");
    sc_trace(mVcdFile, ap_CS_fsm_state70, "ap_CS_fsm_state70");
    sc_trace(mVcdFile, grp_fu_173_p2, "grp_fu_173_p2");
    sc_trace(mVcdFile, grp_fu_180_p2, "grp_fu_180_p2");
    sc_trace(mVcdFile, add_ln11_fu_152_p0, "add_ln11_fu_152_p0");
    sc_trace(mVcdFile, add_ln11_fu_152_p1, "add_ln11_fu_152_p1");
    sc_trace(mVcdFile, sub_ln12_fu_159_p0, "sub_ln12_fu_159_p0");
    sc_trace(mVcdFile, sub_ln12_fu_159_p1, "sub_ln12_fu_159_p1");
    sc_trace(mVcdFile, mul_ln13_fu_166_p0, "mul_ln13_fu_166_p0");
    sc_trace(mVcdFile, mul_ln13_fu_166_p1, "mul_ln13_fu_166_p1");
    sc_trace(mVcdFile, grp_fu_173_ap_start, "grp_fu_173_ap_start");
    sc_trace(mVcdFile, grp_fu_173_ap_done, "grp_fu_173_ap_done");
    sc_trace(mVcdFile, grp_fu_180_ap_start, "grp_fu_180_ap_start");
    sc_trace(mVcdFile, grp_fu_180_ap_done, "grp_fu_180_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("assignment_4_cpp.hdltvin.dat");
    mHdltvoutHandle.open("assignment_4_cpp.hdltvout.dat");
}

assignment_4_cpp::~assignment_4_cpp() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete assignment_4_cpp_bkb_U1;
    delete assignment_4_cpp_cud_U2;
}

void assignment_4_cpp::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void assignment_4_cpp::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        i_0_reg_123 = i_reg_190.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_123 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_190 = i_fu_140_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_134_p2.read(), ap_const_lv1_0))) {
        zext_ln11_reg_195 = zext_ln11_fu_146_p1.read();
    }
}

void assignment_4_cpp::thread_add1_address0() {
    add1_address0 =  (sc_lv<4>) (zext_ln11_reg_195.read());
}

void assignment_4_cpp::thread_add1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        add1_ce0 = ap_const_logic_1;
    } else {
        add1_ce0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_add1_d0() {
    add1_d0 = (!add_ln11_fu_152_p0.read().is_01() || !add_ln11_fu_152_p1.read().is_01())? sc_lv<64>(): (sc_bigint<64>(add_ln11_fu_152_p0.read()) + sc_bigint<64>(add_ln11_fu_152_p1.read()));
}

void assignment_4_cpp::thread_add1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        add1_we0 = ap_const_logic_1;
    } else {
        add1_we0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_add_ln11_fu_152_p0() {
    add_ln11_fu_152_p0 = array_a_cpp_q0.read();
}

void assignment_4_cpp::thread_add_ln11_fu_152_p1() {
    add_ln11_fu_152_p1 = array_b_cpp_q0.read();
}

void assignment_4_cpp::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void assignment_4_cpp::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void assignment_4_cpp::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void assignment_4_cpp::thread_ap_CS_fsm_state70() {
    ap_CS_fsm_state70 = ap_CS_fsm.read()[69];
}

void assignment_4_cpp::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_134_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_134_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_array_a_cpp_address0() {
    array_a_cpp_address0 =  (sc_lv<4>) (zext_ln11_fu_146_p1.read());
}

void assignment_4_cpp::thread_array_a_cpp_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        array_a_cpp_ce0 = ap_const_logic_1;
    } else {
        array_a_cpp_ce0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_array_b_cpp_address0() {
    array_b_cpp_address0 =  (sc_lv<4>) (zext_ln11_fu_146_p1.read());
}

void assignment_4_cpp::thread_array_b_cpp_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        array_b_cpp_ce0 = ap_const_logic_1;
    } else {
        array_b_cpp_ce0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_div1_address0() {
    div1_address0 =  (sc_lv<4>) (zext_ln11_reg_195.read());
}

void assignment_4_cpp::thread_div1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        div1_ce0 = ap_const_logic_1;
    } else {
        div1_ce0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_div1_d0() {
    div1_d0 = grp_fu_173_p2.read();
}

void assignment_4_cpp::thread_div1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        div1_we0 = ap_const_logic_1;
    } else {
        div1_we0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_grp_fu_173_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_173_ap_start = ap_const_logic_1;
    } else {
        grp_fu_173_ap_start = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_grp_fu_180_ap_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_180_ap_start = ap_const_logic_1;
    } else {
        grp_fu_180_ap_start = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_i_fu_140_p2() {
    i_fu_140_p2 = (!i_0_reg_123.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_123.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void assignment_4_cpp::thread_icmp_ln9_fu_134_p2() {
    icmp_ln9_fu_134_p2 = (!i_0_reg_123.read().is_01() || !ap_const_lv4_C.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_123.read() == ap_const_lv4_C);
}

void assignment_4_cpp::thread_mod1_address0() {
    mod1_address0 =  (sc_lv<4>) (zext_ln11_reg_195.read());
}

void assignment_4_cpp::thread_mod1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        mod1_ce0 = ap_const_logic_1;
    } else {
        mod1_ce0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_mod1_d0() {
    mod1_d0 = grp_fu_180_p2.read();
}

void assignment_4_cpp::thread_mod1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state70.read())) {
        mod1_we0 = ap_const_logic_1;
    } else {
        mod1_we0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_mul1_address0() {
    mul1_address0 =  (sc_lv<4>) (zext_ln11_reg_195.read());
}

void assignment_4_cpp::thread_mul1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mul1_ce0 = ap_const_logic_1;
    } else {
        mul1_ce0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_mul1_d0() {
    mul1_d0 = (!mul_ln13_fu_166_p0.read().is_01() || !mul_ln13_fu_166_p1.read().is_01())? sc_lv<64>(): sc_bigint<64>(mul_ln13_fu_166_p0.read()) * sc_bigint<64>(mul_ln13_fu_166_p1.read());
}

void assignment_4_cpp::thread_mul1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        mul1_we0 = ap_const_logic_1;
    } else {
        mul1_we0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_mul_ln13_fu_166_p0() {
    mul_ln13_fu_166_p0 = array_a_cpp_q0.read();
}

void assignment_4_cpp::thread_mul_ln13_fu_166_p1() {
    mul_ln13_fu_166_p1 = array_b_cpp_q0.read();
}

void assignment_4_cpp::thread_sub1_address0() {
    sub1_address0 =  (sc_lv<4>) (zext_ln11_reg_195.read());
}

void assignment_4_cpp::thread_sub1_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sub1_ce0 = ap_const_logic_1;
    } else {
        sub1_ce0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_sub1_d0() {
    sub1_d0 = (!sub_ln12_fu_159_p0.read().is_01() || !sub_ln12_fu_159_p1.read().is_01())? sc_lv<64>(): (sc_bigint<64>(sub_ln12_fu_159_p0.read()) - sc_bigint<64>(sub_ln12_fu_159_p1.read()));
}

void assignment_4_cpp::thread_sub1_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sub1_we0 = ap_const_logic_1;
    } else {
        sub1_we0 = ap_const_logic_0;
    }
}

void assignment_4_cpp::thread_sub_ln12_fu_159_p0() {
    sub_ln12_fu_159_p0 = array_a_cpp_q0.read();
}

void assignment_4_cpp::thread_sub_ln12_fu_159_p1() {
    sub_ln12_fu_159_p1 = array_b_cpp_q0.read();
}

void assignment_4_cpp::thread_zext_ln11_fu_146_p1() {
    zext_ln11_fu_146_p1 = esl_zext<64,4>(i_0_reg_123.read());
}

void assignment_4_cpp::thread_ap_NS_fsm() {
    if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state2;
        } else {
            ap_NS_fsm = ap_ST_fsm_state1;
        }
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_134_p2.read(), ap_const_lv1_1))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state3;
        }
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state4;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        ap_NS_fsm = ap_ST_fsm_state68;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state70;
    }
    else if (esl_seteq<1,70,70>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state2;
    }
    else
    {
        ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}
void assignment_4_cpp::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_a_cpp_address0\" :  \"" << array_a_cpp_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_a_cpp_ce0\" :  \"" << array_a_cpp_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_a_cpp_q0\" :  \"" << array_a_cpp_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_b_cpp_address0\" :  \"" << array_b_cpp_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"array_b_cpp_ce0\" :  \"" << array_b_cpp_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"array_b_cpp_q0\" :  \"" << array_b_cpp_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"add1_address0\" :  \"" << add1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"add1_ce0\" :  \"" << add1_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"add1_we0\" :  \"" << add1_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"add1_d0\" :  \"" << add1_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sub1_address0\" :  \"" << sub1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sub1_ce0\" :  \"" << sub1_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sub1_we0\" :  \"" << sub1_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sub1_d0\" :  \"" << sub1_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mul1_address0\" :  \"" << mul1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mul1_ce0\" :  \"" << mul1_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mul1_we0\" :  \"" << mul1_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mul1_d0\" :  \"" << mul1_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"div1_address0\" :  \"" << div1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"div1_ce0\" :  \"" << div1_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"div1_we0\" :  \"" << div1_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"div1_d0\" :  \"" << div1_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mod1_address0\" :  \"" << mod1_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mod1_ce0\" :  \"" << mod1_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mod1_we0\" :  \"" << mod1_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mod1_d0\" :  \"" << mod1_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

