// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _assignment_4_ap_HH_
#define _assignment_4_ap_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "assignment_4_ap_sbkb.h"
#include "assignment_4_ap_scud.h"
#include "assignment_4_ap_mdEe.h"

namespace ap_rtl {

struct assignment_4_ap : public sc_module {
    // Port declarations 32
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > array_a_cpp_V_address0;
    sc_out< sc_logic > array_a_cpp_V_ce0;
    sc_in< sc_lv<16> > array_a_cpp_V_q0;
    sc_out< sc_lv<4> > array_b_cpp_V_address0;
    sc_out< sc_logic > array_b_cpp_V_ce0;
    sc_in< sc_lv<16> > array_b_cpp_V_q0;
    sc_out< sc_lv<4> > add_V_address0;
    sc_out< sc_logic > add_V_ce0;
    sc_out< sc_logic > add_V_we0;
    sc_out< sc_lv<16> > add_V_d0;
    sc_out< sc_lv<4> > sub_V_address0;
    sc_out< sc_logic > sub_V_ce0;
    sc_out< sc_logic > sub_V_we0;
    sc_out< sc_lv<16> > sub_V_d0;
    sc_out< sc_lv<4> > mul_V_address0;
    sc_out< sc_logic > mul_V_ce0;
    sc_out< sc_logic > mul_V_we0;
    sc_out< sc_lv<16> > mul_V_d0;
    sc_out< sc_lv<4> > div_V_address0;
    sc_out< sc_logic > div_V_ce0;
    sc_out< sc_logic > div_V_we0;
    sc_out< sc_lv<16> > div_V_d0;
    sc_out< sc_lv<4> > mod_V_address0;
    sc_out< sc_logic > mod_V_ce0;
    sc_out< sc_logic > mod_V_we0;
    sc_out< sc_lv<16> > mod_V_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    assignment_4_ap(sc_module_name name);
    SC_HAS_PROCESS(assignment_4_ap);

    ~assignment_4_ap();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    assignment_4_ap_sbkb<1,20,16,16,16>* assignment_4_ap_sbkb_U1;
    assignment_4_ap_scud<1,20,16,16,16>* assignment_4_ap_scud_U2;
    assignment_4_ap_mdEe<1,1,16,16,16>* assignment_4_ap_mdEe_U3;
    sc_signal< sc_lv<22> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_fu_140_p2;
    sc_signal< sc_lv<4> > i_reg_190;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln11_fu_146_p1;
    sc_signal< sc_lv<64> > zext_ln11_reg_195;
    sc_signal< sc_lv<1> > icmp_ln9_fu_134_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > i_0_reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_lv<16> > mul_ln68_fu_180_p2;
    sc_signal< sc_lv<16> > grp_fu_166_p2;
    sc_signal< sc_lv<16> > grp_fu_173_p2;
    sc_signal< sc_lv<16> > add_ln68_fu_152_p0;
    sc_signal< sc_lv<16> > add_ln68_fu_152_p1;
    sc_signal< sc_lv<16> > sub_ln68_fu_159_p0;
    sc_signal< sc_lv<16> > sub_ln68_fu_159_p1;
    sc_signal< sc_logic > grp_fu_166_ap_start;
    sc_signal< sc_logic > grp_fu_166_ap_done;
    sc_signal< sc_logic > grp_fu_173_ap_start;
    sc_signal< sc_logic > grp_fu_173_ap_done;
    sc_signal< sc_lv<22> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<22> ap_ST_fsm_state1;
    static const sc_lv<22> ap_ST_fsm_state2;
    static const sc_lv<22> ap_ST_fsm_state3;
    static const sc_lv<22> ap_ST_fsm_state4;
    static const sc_lv<22> ap_ST_fsm_state5;
    static const sc_lv<22> ap_ST_fsm_state6;
    static const sc_lv<22> ap_ST_fsm_state7;
    static const sc_lv<22> ap_ST_fsm_state8;
    static const sc_lv<22> ap_ST_fsm_state9;
    static const sc_lv<22> ap_ST_fsm_state10;
    static const sc_lv<22> ap_ST_fsm_state11;
    static const sc_lv<22> ap_ST_fsm_state12;
    static const sc_lv<22> ap_ST_fsm_state13;
    static const sc_lv<22> ap_ST_fsm_state14;
    static const sc_lv<22> ap_ST_fsm_state15;
    static const sc_lv<22> ap_ST_fsm_state16;
    static const sc_lv<22> ap_ST_fsm_state17;
    static const sc_lv<22> ap_ST_fsm_state18;
    static const sc_lv<22> ap_ST_fsm_state19;
    static const sc_lv<22> ap_ST_fsm_state20;
    static const sc_lv<22> ap_ST_fsm_state21;
    static const sc_lv<22> ap_ST_fsm_state22;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_V_address0();
    void thread_add_V_ce0();
    void thread_add_V_d0();
    void thread_add_V_we0();
    void thread_add_ln68_fu_152_p0();
    void thread_add_ln68_fu_152_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_array_a_cpp_V_address0();
    void thread_array_a_cpp_V_ce0();
    void thread_array_b_cpp_V_address0();
    void thread_array_b_cpp_V_ce0();
    void thread_div_V_address0();
    void thread_div_V_ce0();
    void thread_div_V_d0();
    void thread_div_V_we0();
    void thread_grp_fu_166_ap_start();
    void thread_grp_fu_173_ap_start();
    void thread_i_fu_140_p2();
    void thread_icmp_ln9_fu_134_p2();
    void thread_mod_V_address0();
    void thread_mod_V_ce0();
    void thread_mod_V_d0();
    void thread_mod_V_we0();
    void thread_mul_V_address0();
    void thread_mul_V_ce0();
    void thread_mul_V_d0();
    void thread_mul_V_we0();
    void thread_sub_V_address0();
    void thread_sub_V_ce0();
    void thread_sub_V_d0();
    void thread_sub_V_we0();
    void thread_sub_ln68_fu_159_p0();
    void thread_sub_ln68_fu_159_p1();
    void thread_zext_ln11_fu_146_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
