// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="assignment_4_ap,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.306000,HLS_SYN_LAT=253,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=438,HLS_SYN_LUT=369,HLS_VERSION=2020_1}" *)

module assignment_4_ap (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        array_a_cpp_V_address0,
        array_a_cpp_V_ce0,
        array_a_cpp_V_q0,
        array_b_cpp_V_address0,
        array_b_cpp_V_ce0,
        array_b_cpp_V_q0,
        add_V_address0,
        add_V_ce0,
        add_V_we0,
        add_V_d0,
        sub_V_address0,
        sub_V_ce0,
        sub_V_we0,
        sub_V_d0,
        mul_V_address0,
        mul_V_ce0,
        mul_V_we0,
        mul_V_d0,
        div_V_address0,
        div_V_ce0,
        div_V_we0,
        div_V_d0,
        mod_V_address0,
        mod_V_ce0,
        mod_V_we0,
        mod_V_d0
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] array_a_cpp_V_address0;
output   array_a_cpp_V_ce0;
input  [15:0] array_a_cpp_V_q0;
output  [3:0] array_b_cpp_V_address0;
output   array_b_cpp_V_ce0;
input  [15:0] array_b_cpp_V_q0;
output  [3:0] add_V_address0;
output   add_V_ce0;
output   add_V_we0;
output  [15:0] add_V_d0;
output  [3:0] sub_V_address0;
output   sub_V_ce0;
output   sub_V_we0;
output  [15:0] sub_V_d0;
output  [3:0] mul_V_address0;
output   mul_V_ce0;
output   mul_V_we0;
output  [15:0] mul_V_d0;
output  [3:0] div_V_address0;
output   div_V_ce0;
output   div_V_we0;
output  [15:0] div_V_d0;
output  [3:0] mod_V_address0;
output   mod_V_ce0;
output   mod_V_we0;
output  [15:0] mod_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg array_a_cpp_V_ce0;
reg array_b_cpp_V_ce0;
reg add_V_ce0;
reg add_V_we0;
reg sub_V_ce0;
reg sub_V_we0;
reg mul_V_ce0;
reg mul_V_we0;
reg div_V_ce0;
reg div_V_we0;
reg mod_V_ce0;
reg mod_V_we0;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_140_p2;
reg   [3:0] i_reg_190;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln11_fu_146_p1;
reg   [63:0] zext_ln11_reg_195;
wire   [0:0] icmp_ln9_fu_134_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] i_0_reg_123;
wire    ap_CS_fsm_state22;
wire  signed [15:0] mul_ln68_fu_180_p2;
wire   [15:0] grp_fu_166_p2;
wire   [15:0] grp_fu_173_p2;
wire  signed [15:0] add_ln68_fu_152_p0;
wire  signed [15:0] add_ln68_fu_152_p1;
wire  signed [15:0] sub_ln68_fu_159_p0;
wire  signed [15:0] sub_ln68_fu_159_p1;
reg    grp_fu_166_ap_start;
wire    grp_fu_166_ap_done;
reg    grp_fu_173_ap_start;
wire    grp_fu_173_ap_done;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
end

assignment_4_ap_sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
assignment_4_ap_sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_166_ap_start),
    .done(grp_fu_166_ap_done),
    .din0(array_a_cpp_V_q0),
    .din1(array_b_cpp_V_q0),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

assignment_4_ap_scud #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
assignment_4_ap_scud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_173_ap_start),
    .done(grp_fu_173_ap_done),
    .din0(array_a_cpp_V_q0),
    .din1(array_b_cpp_V_q0),
    .ce(1'b1),
    .dout(grp_fu_173_p2)
);

assignment_4_ap_mdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
assignment_4_ap_mdEe_U3(
    .din0(array_a_cpp_V_q0),
    .din1(array_b_cpp_V_q0),
    .dout(mul_ln68_fu_180_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_0_reg_123 <= i_reg_190;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_123 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_190 <= i_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_134_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln11_reg_195[3 : 0] <= zext_ln11_fu_146_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_V_ce0 = 1'b1;
    end else begin
        add_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_V_we0 = 1'b1;
    end else begin
        add_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_a_cpp_V_ce0 = 1'b1;
    end else begin
        array_a_cpp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_b_cpp_V_ce0 = 1'b1;
    end else begin
        array_b_cpp_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        div_V_ce0 = 1'b1;
    end else begin
        div_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        div_V_we0 = 1'b1;
    end else begin
        div_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_166_ap_start = 1'b1;
    end else begin
        grp_fu_166_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_173_ap_start = 1'b1;
    end else begin
        grp_fu_173_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        mod_V_ce0 = 1'b1;
    end else begin
        mod_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        mod_V_we0 = 1'b1;
    end else begin
        mod_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_V_ce0 = 1'b1;
    end else begin
        mul_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_V_we0 = 1'b1;
    end else begin
        mul_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sub_V_ce0 = 1'b1;
    end else begin
        sub_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sub_V_we0 = 1'b1;
    end else begin
        sub_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_V_address0 = zext_ln11_reg_195;

assign add_V_d0 = ($signed(add_ln68_fu_152_p0) + $signed(add_ln68_fu_152_p1));

assign add_ln68_fu_152_p0 = array_a_cpp_V_q0;

assign add_ln68_fu_152_p1 = array_b_cpp_V_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign array_a_cpp_V_address0 = zext_ln11_fu_146_p1;

assign array_b_cpp_V_address0 = zext_ln11_fu_146_p1;

assign div_V_address0 = zext_ln11_reg_195;

assign div_V_d0 = grp_fu_166_p2;

assign i_fu_140_p2 = (i_0_reg_123 + 4'd1);

assign icmp_ln9_fu_134_p2 = ((i_0_reg_123 == 4'd12) ? 1'b1 : 1'b0);

assign mod_V_address0 = zext_ln11_reg_195;

assign mod_V_d0 = grp_fu_173_p2;

assign mul_V_address0 = zext_ln11_reg_195;

assign mul_V_d0 = mul_ln68_fu_180_p2;

assign sub_V_address0 = zext_ln11_reg_195;

assign sub_V_d0 = ($signed(sub_ln68_fu_159_p0) - $signed(sub_ln68_fu_159_p1));

assign sub_ln68_fu_159_p0 = array_a_cpp_V_q0;

assign sub_ln68_fu_159_p1 = array_b_cpp_V_q0;

assign zext_ln11_fu_146_p1 = i_0_reg_123;

always @ (posedge ap_clk) begin
    zext_ln11_reg_195[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //assignment_4_ap
