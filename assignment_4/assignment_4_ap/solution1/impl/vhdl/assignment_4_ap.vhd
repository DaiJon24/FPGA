-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity assignment_4_ap is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    array_a_cpp_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    array_a_cpp_V_ce0 : OUT STD_LOGIC;
    array_a_cpp_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    array_b_cpp_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    array_b_cpp_V_ce0 : OUT STD_LOGIC;
    array_b_cpp_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    add_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    add_V_ce0 : OUT STD_LOGIC;
    add_V_we0 : OUT STD_LOGIC;
    add_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sub_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sub_V_ce0 : OUT STD_LOGIC;
    sub_V_we0 : OUT STD_LOGIC;
    sub_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    mul_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mul_V_ce0 : OUT STD_LOGIC;
    mul_V_we0 : OUT STD_LOGIC;
    mul_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    div_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    div_V_ce0 : OUT STD_LOGIC;
    div_V_we0 : OUT STD_LOGIC;
    div_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    mod_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    mod_V_ce0 : OUT STD_LOGIC;
    mod_V_we0 : OUT STD_LOGIC;
    mod_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of assignment_4_ap is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "assignment_4_ap,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-flga2104-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.306000,HLS_SYN_LAT=253,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=438,HLS_SYN_LUT=369,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_140_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_190 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_fu_146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_reg_195 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_reg_123 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal mul_ln68_fu_180_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_fu_152_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_fu_152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln68_fu_159_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln68_fu_159_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_166_ap_start : STD_LOGIC;
    signal grp_fu_166_ap_done : STD_LOGIC;
    signal grp_fu_173_ap_start : STD_LOGIC;
    signal grp_fu_173_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);

    component assignment_4_ap_sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component assignment_4_ap_scud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component assignment_4_ap_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    assignment_4_ap_sbkb_U1 : component assignment_4_ap_sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_166_ap_start,
        done => grp_fu_166_ap_done,
        din0 => array_a_cpp_V_q0,
        din1 => array_b_cpp_V_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    assignment_4_ap_scud_U2 : component assignment_4_ap_scud
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_173_ap_start,
        done => grp_fu_173_ap_done,
        din0 => array_a_cpp_V_q0,
        din1 => array_b_cpp_V_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    assignment_4_ap_mdEe_U3 : component assignment_4_ap_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => array_a_cpp_V_q0,
        din1 => array_b_cpp_V_q0,
        dout => mul_ln68_fu_180_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_0_reg_123 <= i_reg_190;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_123 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_190 <= i_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln11_reg_195(3 downto 0) <= zext_ln11_fu_146_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln11_reg_195(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_134_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_V_address0 <= zext_ln11_reg_195(4 - 1 downto 0);

    add_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            add_V_ce0 <= ap_const_logic_1;
        else 
            add_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_V_d0 <= std_logic_vector(signed(add_ln68_fu_152_p0) + signed(add_ln68_fu_152_p1));

    add_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            add_V_we0 <= ap_const_logic_1;
        else 
            add_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln68_fu_152_p0 <= array_a_cpp_V_q0;
    add_ln68_fu_152_p1 <= array_b_cpp_V_q0;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_134_p2)
    begin
        if (((icmp_ln9_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_134_p2)
    begin
        if (((icmp_ln9_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_a_cpp_V_address0 <= zext_ln11_fu_146_p1(4 - 1 downto 0);

    array_a_cpp_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_a_cpp_V_ce0 <= ap_const_logic_1;
        else 
            array_a_cpp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_b_cpp_V_address0 <= zext_ln11_fu_146_p1(4 - 1 downto 0);

    array_b_cpp_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_b_cpp_V_ce0 <= ap_const_logic_1;
        else 
            array_b_cpp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    div_V_address0 <= zext_ln11_reg_195(4 - 1 downto 0);

    div_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            div_V_ce0 <= ap_const_logic_1;
        else 
            div_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    div_V_d0 <= grp_fu_166_p2;

    div_V_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            div_V_we0 <= ap_const_logic_1;
        else 
            div_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_166_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_166_ap_start <= ap_const_logic_1;
        else 
            grp_fu_166_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_173_ap_start_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_173_ap_start <= ap_const_logic_1;
        else 
            grp_fu_173_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_140_p2 <= std_logic_vector(unsigned(i_0_reg_123) + unsigned(ap_const_lv4_1));
    icmp_ln9_fu_134_p2 <= "1" when (i_0_reg_123 = ap_const_lv4_C) else "0";
    mod_V_address0 <= zext_ln11_reg_195(4 - 1 downto 0);

    mod_V_ce0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mod_V_ce0 <= ap_const_logic_1;
        else 
            mod_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mod_V_d0 <= grp_fu_173_p2;

    mod_V_we0_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            mod_V_we0 <= ap_const_logic_1;
        else 
            mod_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_V_address0 <= zext_ln11_reg_195(4 - 1 downto 0);

    mul_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mul_V_ce0 <= ap_const_logic_1;
        else 
            mul_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_V_d0 <= mul_ln68_fu_180_p2;

    mul_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mul_V_we0 <= ap_const_logic_1;
        else 
            mul_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_V_address0 <= zext_ln11_reg_195(4 - 1 downto 0);

    sub_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sub_V_ce0 <= ap_const_logic_1;
        else 
            sub_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_V_d0 <= std_logic_vector(signed(sub_ln68_fu_159_p0) - signed(sub_ln68_fu_159_p1));

    sub_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sub_V_we0 <= ap_const_logic_1;
        else 
            sub_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln68_fu_159_p0 <= array_a_cpp_V_q0;
    sub_ln68_fu_159_p1 <= array_b_cpp_V_q0;
    zext_ln11_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_123),64));
end behav;
