// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lec10ex1_HH_
#define _lec10ex1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "lec10ex1_mul_32s_bkb.h"
#include "lec10ex1_arr.h"

namespace ap_rtl {

struct lec10ex1 : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_out< sc_lv<4> > c_address0;
    sc_out< sc_logic > c_ce0;
    sc_in< sc_lv<32> > c_q0;
    sc_in< sc_lv<32> > x;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    lec10ex1(sc_module_name name);
    SC_HAS_PROCESS(lec10ex1);

    ~lec10ex1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    lec10ex1_arr* arr_U;
    lec10ex1_mul_32s_bkb<1,2,32,32,32>* lec10ex1_mul_32s_bkb_U1;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > arr_address0;
    sc_signal< sc_logic > arr_ce0;
    sc_signal< sc_logic > arr_we0;
    sc_signal< sc_lv<32> > arr_d0;
    sc_signal< sc_lv<32> > arr_q0;
    sc_signal< sc_lv<32> > sext_ln12_fu_133_p1;
    sc_signal< sc_lv<32> > sext_ln12_reg_180;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln14_fu_145_p2;
    sc_signal< sc_lv<1> > icmp_ln14_reg_189;
    sc_signal< sc_lv<1> > tmp_fu_137_p3;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > grp_fu_126_p2;
    sc_signal< sc_lv<5> > i_reg_208;
    sc_signal< sc_lv<32> > c_load_reg_213;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_164_p2;
    sc_signal< sc_lv<32> > mul_ln24_reg_218;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > sum_fu_169_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > sum_0_reg_91;
    sc_signal< sc_lv<5> > ap_phi_mux_i_0_phi_fu_108_p4;
    sc_signal< sc_lv<5> > i_0_reg_104;
    sc_signal< sc_lv<32> > data_0_reg_116;
    sc_signal< sc_lv<64> > zext_ln21_fu_151_p1;
    sc_signal< sc_lv<64> > zext_ln21_1_fu_156_p1;
    sc_signal< sc_lv<64> > zext_ln24_fu_160_p1;
    sc_signal< sc_lv<5> > grp_fu_126_p0;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_i_0_phi_fu_108_p4();
    void thread_ap_ready();
    void thread_arr_address0();
    void thread_arr_ce0();
    void thread_arr_d0();
    void thread_arr_we0();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_grp_fu_126_p0();
    void thread_grp_fu_126_p2();
    void thread_icmp_ln14_fu_145_p2();
    void thread_sext_ln12_fu_133_p1();
    void thread_sum_fu_169_p2();
    void thread_tmp_fu_137_p3();
    void thread_y();
    void thread_y_ap_vld();
    void thread_zext_ln21_1_fu_156_p1();
    void thread_zext_ln21_fu_151_p1();
    void thread_zext_ln24_fu_160_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
